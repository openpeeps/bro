TokenKind	bropkg/engine/tokens.html#TokenKind	tokens: TokenKind	
TokenTuple	bropkg/engine/tokens.html#TokenTuple	tokens: TokenTuple	
Lexer	bropkg/engine/tokens.html#Lexer	tokens: Lexer	
LexerException	bropkg/engine/tokens.html#LexerException	tokens: LexerException	
getDefaultToken	bropkg/engine/tokens.html#getDefaultToken,string	tokens: getDefaultToken(strtk: string): TokenKind	
init	bropkg/engine/tokens.html#init,typedesc[L],string	tokens: init[L: Lexer](lex: typedesc[L]; fileContent: string;\n               allowMultilineStrings = false): L	
generateIdentCase	bropkg/engine/tokens.html#generateIdentCase,Lexer	tokens: generateIdentCase(lex: var Lexer)	
lexReady	bropkg/engine/tokens.html#lexReady,Lexer	tokens: lexReady(lex: var Lexer)	
inc	bropkg/engine/tokens.html#inc,Lexer,int	tokens: inc(lex: var Lexer; offset = 1)	
current	bropkg/engine/tokens.html#current,Lexer	tokens: current(lex: var Lexer): char	
add	bropkg/engine/tokens.html#add,Lexer	tokens: add(lex: var Lexer)	
setError	bropkg/engine/tokens.html#setError,Lexer,string	tokens: setError(lex: var Lexer; message: string)	
hasError	bropkg/engine/tokens.html#hasError,Lexer	tokens: hasError(lex: Lexer): bool	
getError	bropkg/engine/tokens.html#getError,Lexer	tokens: getError(lex: Lexer): string	
hasLetters	bropkg/engine/tokens.html#hasLetters,Lexer,int	tokens: hasLetters(lex: var Lexer; pos: int): bool	
hasNumbers	bropkg/engine/tokens.html#hasNumbers,Lexer,int	tokens: hasNumbers(lex: var Lexer; pos: int): bool	
skip	bropkg/engine/tokens.html#skip,Lexer	tokens: skip(lex: var Lexer)	
handleCustomIdent	bropkg/engine/tokens.html#handleCustomIdent,T,TokenKind	tokens: handleCustomIdent[T: Lexer](lex: var T; kind: TokenKind)	
handleSnippets	bropkg/engine/tokens.html#handleSnippets,Lexer,TokenKind	tokens: handleSnippets(lex: var Lexer; kind: TokenKind)	
getToken	bropkg/engine/tokens.html#getToken,Lexer	tokens: getToken(lex: var Lexer): TokenTuple	
